name: Tauri Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--bundles app dmg'
          - platform: 'ubuntu-22.04'
            args: '--bundles deb appimage'
          - platform: 'windows-latest'
            args: '--bundles nsis'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true
          shared-key: ${{ matrix.platform }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "VITE_TMDB_API_KEY=${{ secrets.VITE_TMDB_API_KEY }}" > .env
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env

      - name: Build with Tauri
        uses: tauri-apps/tauri-action@v0.5.23
        id: tauri-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          tagName: ${{ github.ref_name }}
          releaseName: 'TVCalendar v__VERSION__'
          releaseBody: 'Téléchargez les fichiers ci-dessous pour installer cette version.'
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

      # Renommer le fichier .app.tar.gz pour inclure la version (macOS uniquement)
      - name: Rename and re-upload macOS app bundle
        if: matrix.platform == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          BUNDLE_PATH="src-tauri/target/release/bundle/macos"
          OLD_NAME="TVCalendar.app.tar.gz"
          NEW_NAME="TVCalendar_${VERSION}_aarch64.app.tar.gz"

          if [ -f "${BUNDLE_PATH}/${OLD_NAME}" ]; then
            echo "Found ${OLD_NAME}, processing..."

            # Renommer le fichier localement
            mv "${BUNDLE_PATH}/${OLD_NAME}" "${BUNDLE_PATH}/${NEW_NAME}"
            echo "Renamed to ${NEW_NAME}"

            # Attendre un peu pour que la release soit complètement créée
            sleep 5

            # Supprimer les anciens fichiers de la release (si existent)
            echo "Deleting old assets from release..."
            gh release delete-asset ${{ github.ref_name }} "TVCalendar_aarch64.app.tar.gz" -y 2>/dev/null || echo "TVCalendar_aarch64.app.tar.gz not found"
            gh release delete-asset ${{ github.ref_name }} "${OLD_NAME}" -y 2>/dev/null || echo "${OLD_NAME} not found"

            # Uploader le nouveau fichier vers la release
            echo "Uploading ${NEW_NAME}..."
            gh release upload ${{ github.ref_name }} "${BUNDLE_PATH}/${NEW_NAME}"
            echo "Successfully uploaded ${NEW_NAME}"
          else
            echo "File ${BUNDLE_PATH}/${OLD_NAME} not found!"
            ls -la "${BUNDLE_PATH}/"
          fi
